@using System.Diagnostics.CodeAnalysis
<div class='container'>
    <span class='large circle'>
        <span class='label'>@Label</span>
        <span class='value'>
            @if (CurrentChanged.HasDelegate) {
            <input value=@Current type="number" @oninput="UpdateCurrent" />
            } else {
                @Current;
            }
        </span>
    </span>
    <span class='small circle'>
        <span class='label'>Max</span>
        <span class='value'>
            @if (MaxChanged.HasDelegate) {
            <input value=@Max type="number" @oninput="UpdateMax" />
            } else {
                @Max;
            }
        </span>
    </span>
</div>

@code {
    [Parameter]
    public string Label { get; set; } = "Current";

    [Parameter]
    public int Current { get; set; }

    [Parameter]
    public EventCallback<int> CurrentChanged { get; set; }


    [Parameter]
    public int Max { get; set; } 

    [Parameter]
    public EventCallback<int> MaxChanged { get; set; } 

    async Task UpdateCurrent(ChangeEventArgs e) => await UpdateField(e, CurrentChanged, Current);

    async Task UpdateMax(ChangeEventArgs e) => await UpdateField(e, MaxChanged, Max);

    async Task UpdateField(ChangeEventArgs e, EventCallback<int> eventCallback, int currentFieldValue)
    {
        if (int.TryParse(e.Value?.ToString(), out int result) && result != currentFieldValue)
        {
            await eventCallback.InvokeAsync(result);
            StateHasChanged();
        }
    }
}
